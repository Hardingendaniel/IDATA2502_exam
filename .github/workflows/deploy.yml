name: CI/CD to AKS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: testingdockerimage.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t testingdockerimage.azurecr.io/idata2502_exam:latest .

      - name: Test Docker image
        run: |
          docker run --rm testingdockerimage.azurecr.io/idata2502_exam:latest npm test

      - name: Push Docker image
        run: |
          docker push testingdockerimage.azurecr.io/idata2502_exam:latest

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.x

      - name: Terraform Init
        run: terraform init
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Validate Terraform Files
        run: terraform validate
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Plan
        run: |
          terraform plan -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                          -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
                          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                          -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
                          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Configure kubectl
        run: az aks get-credentials --resource-group myAzuremGroup --name myAKSCluster
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Create Kubernetes Secret
        run: |
          kubectl create secret docker-registry acr-secret \
            --docker-server=testingdockerimage.azurecr.io \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            --docker-email=daniel.auflem@hotmail.com

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yml
          kubectl apply -f k8s/service.yml

      - name: Validate Kubernetes Manifests
        run: |
          kubectl apply --dry-run=client -f k8s/deployment.yml
          kubectl apply --dry-run=client -f k8s/service.yml
      
      - name: Run Integration Tests
        run: |
          chmod +x run_tests.sh
          kubectl run test-runner --image=testingdockerimage.azurecr.io/idata2502_exam --restart=Never -- /bin/sh -c "./run_tests.sh"
          kubectl wait --for=condition=complete pod/test-runner --timeout=200s
            










